package mx.com.icsp.util;

import java.util.Iterator;
import java.util.Scanner;

import mx.com.icsc.common.util.LogPattern;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;

public class CreateXML {
	Logger log = Logger.getLogger(this.getClass());
	LogPattern logPattern = new LogPattern(Constants.domainCode,
			Constants.solutioNameCode, Constants.platform, Constants.tower,
			this.getClass().getName());

	// public static void main(String[] args){
	// String file = "a,b,c \n e,f,g";
	// createXml(file);
	// }

	public StringBuilder createXml(String file) {
		StringBuilder sb = null;
		int j = 0;
		if (file != null) {
			log.info("[CreateXML] File: " + file);
			sb = new StringBuilder();
			sb.append("<?xml version=\"1.0\" enconding=\"UTF-8\" ?>");
			sb.append("<rows>");
			Scanner scan = new Scanner(file);
			while (scan.hasNextLine()) {
				String oneLine = scan.nextLine();
				String[] tokens = oneLine.split(",");
				sb.append("<row id=\"").append(j).append("\">");
				for (int i = 0; i < tokens.length; i++) {
					sb.append("<cell>").append(tokens[i].trim())
							.append("</cell>");
				}
				sb.append("</row>");
				j++;
			}
			sb.append("</rows>");
			log.info("SB: " + sb.toString());
			return sb;
		}
		return sb;
	}

	public String createGrid(Sheet sheet) {
		Iterator<Row> rowIterator = sheet.iterator();
		StringBuilder sb = new StringBuilder();
		sb.append("<rows>");
		while (rowIterator.hasNext()) {
			Row row = rowIterator.next();
			Iterator<Cell> cellIterator = row.cellIterator();

			sb.append("<row>");

			int column = 0;
			while (cellIterator.hasNext()) {
				Cell cell = cellIterator.next();
				sb.append("<cell>");
				switch (cell.getCellType()) {
				case Cell.CELL_TYPE_BOOLEAN:
					sb.append(cell.getBooleanCellValue());
					break;
				case Cell.CELL_TYPE_NUMERIC:
					sb.append(cell.getNumericCellValue());
					break;
				case Cell.CELL_TYPE_STRING:
					String cellValue = cell.getStringCellValue();
					cellValue = cellValue.replace("\"", "\\\"");
					sb.append(cellValue);
					break;
				}

				switch (column) {
					case Constants.COLUMN_ID_LEDGER:
					break;
						
					COLUMN_ASSET_TYPE = 1;
					COLUMN_DESCRIPTION = 2;
					COLUMN_BRAND = 3;
					COLUMN_MODEL = 4;
					COLUMN_SERIAL_NUMBER = 5;
					COLUMN_MATERIAL = 6;
					COLUMN_COLOR = 7;
					COLUMN_SUPPLIER = 8;
					COLUMN_DIRECTLY_RESPONSIBLE = 9;
					COLUMN_GENERAL_MANAGER = 10;
					COLUMN_BILL = 11;
					COLUMN_BILL_DATE = 12;
					COLUMN_PRICE = 13;
					COLUMN_USE_DATE = 14;
					COLUMN_PLACE = 15;
					COLUMN_LOCATION = 16;
					COLUMN_GENERAL_LOCATION = 17;
					COLUMN_SECURE = 18;
					COLUMN_START = 19;
				}

			}
			sb.append("</cell>");
			column++;

			sb.append("</row>");
		}
		sb.append("</rows>");

		return sb.toString();
	}
}
