package mx.com.icsp.util.pdf;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.ImageIcon;
import javax.xml.parsers.ParserConfigurationException;

import mx.com.icsc.common.Asset;
import mx.com.icsc.common.User;
import mx.com.icsc.common.util.LogPattern;
import mx.com.icsp.util.Constants;
import mx.com.icsp.util.excel.ExcelCell;
import mx.com.icsp.util.excel.ExcelRow;
import mx.com.icsp.util.excel.ExcelXmlParser;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Row;
import org.w3c.dom.DOMException;
import org.xml.sax.SAXException;

public class PdfWriter {
	
	private Logger log = Logger.getLogger(this.getClass());
	private LogPattern logPattern = new LogPattern(Constants.domainCode,
			Constants.solutioNameCode, Constants.platform, Constants.tower,
			this.getClass().getName());
	
	private ExcelXmlParser parser;
	private String fileName, userName = "";
	private User user;
	
	public void generate(String idTransaction, HttpServletRequest request, HttpServletResponse response, String xml){
		
		String methodName = new Throwable().getStackTrace()[0].getMethodName();
		
		log.info(logPattern.buildPattern(methodName, idTransaction, "xml", xml));
		parser = new ExcelXmlParser();
		try {
			user = request.getSession().getAttribute("user") != null ? (User)request.getSession().getAttribute("user") : new User();
			if(user.getName() != null && !user.getName().equals("")){
				userName = userName + user.getName();
				if(user.getLastName() != null && !user.getLastName().equals(""))
					userName = userName + user.getLastName();
			}else{
				userName = "Anonimo";
			}
			
			fileName = request.getParameter("fileName");
			parser.setXML(xml);
			List<Asset> list = rowsPrint(parser);
			createReport(idTransaction, response, list, fileName, userName);
//			rowsPrint(parser, response);
//			outputExcel(idTransaction, response, fileName+"."+extension);
		} catch (DOMException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "DOMException", e.getMessage()), e);
		} catch (IOException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "IOException", e.getMessage()), e);
		} catch (ParserConfigurationException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "ParserConfigurationException", e.getMessage()), e);
		} catch (SAXException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "SAXException", e.getMessage()), e);
		}
	}
	
	private List<Asset> rowsPrint(ExcelXmlParser parser) {
		ExcelRow[] rows = parser.getGridContent();
		List<Asset> list = new ArrayList<Asset>();
		for (int i = 0; i < rows.length; i++) {
			Asset asset = new Asset();
			ExcelCell[] cells = rows[i].getCells();
				asset.setIdLedger(cells[0].getLongValue());
				asset.setSubclass(cells[1].getValue());
				asset.setDescription(cells[2].getValue());
				asset.setBrand(cells[3].getValue());
				asset.setModel(cells[4].getValue());
				asset.setSerialNumber(cells[5].getValue());
				asset.setMaterial(cells[6].getValue());
				asset.setColor(cells[7].getValue());
				asset.setSupplier(cells[8].getValue());
				asset.setDirectlyResponsible(cells[9].getValue());
				asset.setGeneralManager(cells[10].getValue());
				asset.setTag(cells[11].getLongValue());
				asset.setBill(cells[12].getValue());
				asset.setBillingDate(cells[13].getDateValue());
				asset.setPrice(cells[14].getFloatValue());
				asset.setUseDate(cells[15].getDateValue());
				asset.setLocation(cells[16].getValue());
				asset.setGeneralLocation(cells[17].getValue());
				asset.setSecure(cells[18].getValue());
		}
		return list;
	}
	
	public void createReport(String idTransaction, HttpServletResponse response,
			List<Asset> list, String fileName, String user) {

		String methodName = new Throwable().getStackTrace()[0].getMethodName();

		try {
			Map<String, Object> parameters = new HashMap<String, Object>();
			JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(list);
			
			URL url = null;
			try{
				url = this.getClass().getResource("logo2.png");
				log.info(logPattern.buildPattern(methodName, idTransaction, "url", ToStringBuilder.reflectionToString(url)));
				ImageIcon img = new ImageIcon(url.getPath());
				parameters.put("image", img.getImage());
			}catch(Exception e){
				log.error(logPattern.buildPattern(methodName, idTransaction,
						"Exception", e.getMessage()), e);
			}

			// Datos de la cuenta
//			parameters.put("cuenta", "5.12357");
			parameters.put("user", user);

			InputStream inputStream = this.getClass().getResourceAsStream("report3.jrxml");
			JasperReport report;
			report = JasperCompileManager.compileReport(inputStream);

			JasperPrint print = JasperFillManager.fillReport(report, parameters, dataSource);
			fileName = fileName.toLowerCase().contains(".pdf") ? fileName : fileName + ".pdf";

			response.setContentType("application/x-pdf");
			response.setHeader("Content-Disposition", "attachment; filename="+fileName);// set HTTP/1.0 no-cache

			OutputStream outStream;
			outStream = response.getOutputStream();

			JasperExportManager.exportReportToPdfStream(print, outStream);

		} catch (JRException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction,
					"JRException", e.getMessage()), e);
		} catch (IOException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction,
					"IOException", e.getMessage()), e);
		}

	}
	
	public void createGuard(String idTransaction, HttpServletResponse response,
			String fileName, List<Asset> arrayList) {
		
	}
}
