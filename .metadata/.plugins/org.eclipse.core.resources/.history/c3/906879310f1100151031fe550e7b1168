package mx.com.icsp.util.pdf;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;

import mx.com.icsc.common.util.LogPattern;
import mx.com.icsp.util.Constants;
import mx.com.icsp.util.excel.ExcelXmlParser;

import org.apache.log4j.Logger;
import org.w3c.dom.DOMException;
import org.xml.sax.SAXException;

public class PdfWriter {
	
	private Logger log = Logger.getLogger(this.getClass());
	private LogPattern logPattern = new LogPattern(Constants.domainCode,
			Constants.solutioNameCode, Constants.platform, Constants.tower,
			this.getClass().getName());
	
	private ExcelXmlParser parser;
	
	public void generate(String idTransaction, HttpServletRequest request, HttpServletResponse response, String xml){
		
		String methodName = new Throwable().getStackTrace()[0].getMethodName();
		
		log.info(logPattern.buildPattern(methodName, idTransaction, "xml", xml));
		parser = new ExcelXmlParser();
		try {
			fileName = request.getParameter("fileName");
			parser.setXML(xml);
			createExcel();
			rowsPrint(parser, response);
			outputExcel(idTransaction, response, fileName+"."+extension);
		} catch (DOMException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "DOMException", e.getMessage()), e);
		} catch (IOException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "IOException", e.getMessage()), e);
		} catch (ParserConfigurationException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "ParserConfigurationException", e.getMessage()), e);
		} catch (SAXException e) {
			log.error(logPattern.buildPattern(methodName, idTransaction, "SAXException", e.getMessage()), e);
		}
	
	}
}
