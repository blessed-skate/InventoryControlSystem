package mx.com.icsp.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import mx.com.icsc.common.Asset;
import mx.com.icsp.service.AssetService;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

public class AssetAction extends DispatchAction {

	Logger log = Logger.getLogger(this.getClass());

	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

	AssetService assetService;
	public void setAssetService(AssetService assetService) {
		this.assetService = assetService;
	}

	public String dummyXML(Asset asset) {
		StringBuilder sb = new StringBuilder();
		sb.append("<rows>");
		sb.append("<header>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Descripcion</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Marca</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Modelo</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Serie</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Material</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Color</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Proveedor</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Reponsable general</column>");
		sb.append("<column type=\"dyn\" color=\"#d5f1ff\" sort=\"str\">Responsable directo</column>");
		sb.append("</header>");
		sb.append("<row>");
		sb.append("<cell>").append(asset.getDescription()).append("</cell>");
		sb.append("<cell>").append(asset.getBrand()).append("</cell>");
		sb.append("<cell>").append(asset.getModel()).append("</cell>");
		sb.append("<cell>").append(asset.getSerialNumber()).append("</cell>");
		sb.append("<cell>").append(asset.getMaterial()).append("</cell>");
		sb.append("<cell>").append(asset.getColor()).append("</cell>");
		sb.append("<cell>").append(asset.getSupplier()).append("</cell>");
		sb.append("<cell>").append(asset.getGeneralManager()).append("</cell>");
		sb.append("<cell>").append(asset.getDirectlyResponsible()).append("</cell>");
		sb.append("</row>");
		sb.append("</rows>");
		return sb.toString();
	}

	public void getAsset(ActionMapping arg0, ActionForm arg1,
			HttpServletRequest request, HttpServletResponse response) {

		Asset[] assetArray = assetService.getAsset();
		StringBuilder sb = new StringBuilder();

		try {
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

			if (assetArray != null) {
				sb.append("<rows>");
				for (Asset asset : assetArray) {
					sb.append("<row id=\"" + asset.getId() + "\">");
					sb.append("<cell type=\"sub_row_grid\">").append("xml/query_sgrid.xml").append("</cell>");
					sb.append("<cell>").append(asset.getIdLedger()).append("</cell>");
					sb.append("<cell>").append(asset.getAssetType()).append("</cell>");
					sb.append("<cell>").append(asset.getTag()).append("</cell>");
					sb.append("<cell>").append(asset.getBill()).append("</cell>");
					sb.append("<cell>").append(sdf.format(asset.getBillingDate())).append("</cell>");
					sb.append("<cell>").append(asset.getLocation()).append("</cell>");
					sb.append("<cell>").append(sdf.format(asset.getUseDate())).append("</cell>");
					sb.append("<cell>").append(asset.getPrice()).append("</cell>");
					sb.append("<cell>").append(asset.getGeneralLocation()).append("</cell>");
					sb.append("<cell>").append(asset.getSecure()).append("</cell>");
					sb.append("</row>");
				}
				sb.append("</rows>");
			} else {
				sb.append("<error>No se encontraron registros</error>");
			}
		} catch (Exception e1) {
			log.error("Exception in getAvatarsByLevel!!!!");
			sb.append("<response>");
			sb.append("<responseCode>").append(100).append("</responseCode>");
			sb.append("<responseMsg>").append("Error al insertar registro").append("</responseMsg>");
			sb.append("</response>");
		}

		setResponse(response, sb);
	}
	
	public void getAssetById(ActionMapping arg0, ActionForm arg1,
			HttpServletRequest request, HttpServletResponse response) {

		String idAsset = request.getParameter("idAsset");
		Asset asset = assetService.getAssetById(idAsset);
		StringBuilder sb = new StringBuilder();

		try {
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

			if (asset != null) {
				sb.append("<data>");
				sb.append("<idLedger>").append(asset.getIdLedger()).append("</idLedger>");
				sb.append("<idAssetType>").append(asset.getAssetType()).append("</idAssetType>");
				sb.append("<description>").append(asset.getTag()).append("</description>");
				sb.append("<brand>").append(asset.getBrand()).append("</brand>");
				sb.append("<model>").append(asset.getModel()).append("</model>");
				sb.append("<serialNumber>").append(asset.getSerialNumber()).append("</serialNumber>");
				sb.append("<idMaterial>").append(asset.getMaterial()).append("</idMaterial>");
				sb.append("<idColor>").append(asset.getColor()).append("</idColor>");
				sb.append("<supplier>").append(asset.getSupplier()).append("</supplier>");
				sb.append("<generalManager>").append(asset.getGeneralManager()).append("</generalManager>");
				sb.append("<directlyResponsible>").append(asset.getDirectlyResponsible()).append("</directlyResponsible>");
				sb.append("<tag>").append(asset.getTag()).append("</tag>");
				sb.append("<bill>").append(asset.getBill()).append("</bill>");
				sb.append("<billingDate>").append(sdf.format(asset.getBillingDate())).append("</billingDate>");
				sb.append("<location>").append(asset.getLocation()).append("</location>");
				sb.append("<useDate>").append(sdf.format(asset.getUseDate())).append("</useDate>");
				sb.append("<price>").append(asset.getPrice()).append("</price>");
				sb.append("<generalLocation>").append(asset.getGeneralLocation()).append("</generalLocation>");
				sb.append("<secure>").append(asset.getSecure()).append("</secure>");
				sb.append("</data>");
			} else {
				sb.append("<error>No se encontraron registros</error>");
			}
		} catch (Exception e1) {
			log.error("Exception in getAvatarsByLevel!!!!");
			sb.append("<response>");
			sb.append("<responseCode>").append(100).append("</responseCode>");
			sb.append("<responseMsg>").append("Error al insertar registro").append("</responseMsg>");
			sb.append("</response>");
		}

		setResponse(response, sb);
	}

	public void insertAsset(ActionMapping arg0, ActionForm arg1,
			HttpServletRequest request, HttpServletResponse response) {

		log.info("Begin insertAsset");
		
		StringBuilder sb = new StringBuilder();
		
		try {
//			Date date = sdf.parse("01/06/2015");
			
			long idLedger = gerParameterLong(request,"idLedger");
			int idAssetType = gerParameterInt(request,"idAssetType");
			
			String description = gerParameterString(request, "description");
			String brand = gerParameterString(request, "brand");
			String model = gerParameterString(request, "model");
			String serialNumber = gerParameterString(request, "serialNumber");
			
			int idMaterial = gerParameterInt(request,"idMaterial");
			int idColor = gerParameterInt(request,"idColor");
			
			String supplier = gerParameterString(request, "supplier");
			String generalManager = gerParameterString(request, "generalManager");
			String directlyResponsible = gerParameterString(request, "directlyResponsible");
			
			long tag = gerParameterLong(request,"tag");
			
			String bill = gerParameterString(request, "bill");
			Date billingDate = getParameterDate(request, "billingDate");
			String location = gerParameterString(request, "location");
			Date useDate = getParameterDate(request, "useDate");
			
			float price = gerParameterFloat(request, "price");
			
			String generalLocation = gerParameterString(request, "generalLocation");
			String secure = gerParameterString(request, "secure");

			Asset asset = new Asset();
			asset.setIdLedger(idLedger);
			asset.setIdAssetType(idAssetType);
			asset.setDescription(description);
			asset.setBrand(brand);
			asset.setModel(model);
			asset.setSerialNumber(serialNumber);
			asset.setIdMaterial(idMaterial);
			asset.setIdColor(idColor);
			asset.setSupplier(supplier);
			asset.setGeneralManager(generalManager);
			asset.setDirectlyResponsible(directlyResponsible);
			asset.setTag(tag);
			asset.setBill(bill);
			asset.setBillingDate(billingDate);
			asset.setLocation(location);
			asset.setUseDate(useDate);
			asset.setPrice(price);
			asset.setGeneralLocation(generalLocation);
			asset.setSecure(secure);
			
			log.info("Asset: " + ToStringBuilder.reflectionToString(asset));

			int responseCode = assetService.insertAsset(asset);
			if (responseCode == 1) {

				sb.append("<response>");
				sb.append("<responseCode>").append(0).append("</responseCode>");
				sb.append("<responseMsg>").append("Exito al insertar registro").append("</responseMsg>");
				sb.append("</response>");
			} else {
				sb.append("<response>");
				sb.append("<responseCode>").append(100).append("</responseCode>");
				sb.append("<responseMsg>").append("Error en la BD al insertar registro").append("</responseMsg>");
				sb.append("</response>");
			}

		} catch (ParseException e) {
			log.error("Exception: " + e.getMessage(), e);
			sb.append("<response>");
			sb.append("<responseCode>").append(101).append("</responseCode>");
			sb.append("<responseMsg>").append("Error al interpretar la fecha")
					.append("</responseMsg>");
			sb.append("</response>");
		} catch (Exception e) {
			log.error("Exception: " + e.getMessage(), e);
			sb.append("<response>");
			sb.append("<responseCode>").append(102).append("</responseCode>");
			sb.append("<responseMsg>").append("Error al insertar registro")
					.append("</responseMsg>");
			sb.append("</response>");
		}

		setResponse(response, sb);
		
		log.info("End insertAsset");
	}
	
	public void setResponse(HttpServletResponse response, StringBuilder sb){
		response.setHeader("Expires", "Sat, 6 May 1995 12:00:00 GMT");
		response.setHeader("Cache-Control", "no-store,no-cache,must-revalidate");
		response.addHeader("Cache-Control", "post-check=0, pre-check=0");
		response.setContentType("application/xml");
		response.setHeader("Pragma", "no-cache");// set HTTP/1.0 no-cache

		PrintWriter out;

		try {
			out = response.getWriter();
			out.println(sb.toString());
		} catch (IOException e1) {
			log.error("Exception in getAvatarsByLevel!!!!");
		}
	}
	
	public String gerParameterString(HttpServletRequest request, String name){
		return request.getParameter(name) != null && !request.getParameter(name).trim().equals("") ? request.getParameter(name) : null ;
	}
	
	public int gerParameterInt(HttpServletRequest request, String name){
		return request.getParameter(name) != null && !request.getParameter(name).trim().equals("") ? Integer.parseInt(request.getParameter(name)) : null ;
	}
	
	public long gerParameterLong(HttpServletRequest request, String name){
		return request.getParameter(name) != null && !request.getParameter(name).trim().equals("") ? Long.parseLong(request.getParameter(name)) : null ;
	}
	
	public float gerParameterFloat(HttpServletRequest request, String name){
		return request.getParameter(name) != null && !request.getParameter(name).trim().equals("") ? Float.parseFloat(request.getParameter(name)) : null ;
	}
	
	public Date getParameterDate(HttpServletRequest request, String name) throws ParseException{
		return request.getParameter(name) != null && !request.getParameter(name).trim().equals("") ? sdf.parse(request.getParameter(name)) : null ;
	}
}
